
═════> Descrições a respeito da arquitetura, desing, e novas práticas e tecnologias adotadas

═> TAG SUMMARY:

Muito útil para distinguir facilmente comentários descritivos relativos à classes, propriedades de classes e
métodos, de comentários específicos referentes a porções menores de código e de caráter local.
Um exemplo da sua utilidade deixando de lado seu caráter estético, é a possibilidade de adicionar comentários
descritivos e explicativos para as propriedades de uma classe por exemplo, ou um método, descrevendo
seu funcionamento após o mouse parar sob seu nome: uma mensagem explicativa surgirá acompanhando a assinatura
do método, mensagem essa definida na tag SUMMARY localizada sobre a assinatura do classe/propriedade/método.
Extremamente útil pois entrelaça o código com seus comentários reponsáveis por descrever seu funcionamento

═> CLASSE ABSTRATA
As classes abstratas são elementos-chave na programação orientada a objetos, oferecendo uma maneira de definir 
uma estrutura comum para um grupo de classes relacionadas. Elas são importantes porque permitem capturar o 
comportamento e as características compartilhadas entre várias classes, enquanto ainda permitem que cada classe 
específica forneça sua própria implementação para comportamentos específicos. Isso promove a reutilização de 
código e facilita a manutenção, uma vez que as alterações feitas na classe abstrata refletem automaticamente 
em todas as suas subclasses. Além disso, as classes abstratas podem definir métodos que devem ser implementados 
pelas subclasses, fornecendo um contrato claro para a implementação de funcionalidades específicas. Isso promove 
um design mais coerente e modular, facilitando a extensão e a evolução do sistema ao longo do tempo

EXEMPLO PRÁTICO UTILIZADO NO SISTEMA: CLASSE ABSTRATA VEICULO:

A classe abstrata Veiculo serve como um modelo genérico para representar características comuns a todos os 
tipos de veículos no sistema, como carros e caminhões. Ela encapsula atributos e métodos compartilhados, 
eliminando a necessidade de reimplementá-los várias vezes em cada classe concreta. Dessa forma, promove a 
reutilização de código e facilita a manutenção, garantindo consistência e coesão entre as diferentes implementações de veículos.

═> INTERFACES
As interfaces definem um contrato claro entre diferentes partes do código. Elas estabelecem quais comportamentos uma 
classe deve implementar, sem se preocupar com os detalhes de implementação.
Isso promove uma forte abstração, permitindo que nos concentremos no que uma classe deve fazer, em vez de como ela faz.

EXEMPLO PRÁTICO UTILIZADO NO SISTEMA: INTERFACE IVENDA:

A interface IVenda define um contrato que especifica os comportamentos relacionados a vendas em um sistema. 
Ela lista três métodos principais: FazVenda(), CancelaVenda() e EstornaVenda(), que representam ações comuns relacionadas 
ao processo de venda.
A interface IVenda abstrai os detalhes específicos da implementação de venda, fornecendo um conjunto padronizado de métodos 
que todas as classes que realizam vendas devem implementar.
Todas as classes concretas que descendem de IVENDA são obrigadas a implementar os métodos da interface em questão, pois
essa interface define os métodos cruciais para todo tipo de venda, independente de seu método de pagamento.

EXEMPLO PRÁTICO DE POLIMORFISMO COM INTERFACE UTILIZADO NO SISTEMA: INTERFACE IVEICULO:
IVeiculo possui dentre outros métodos o método ExibeIPVA. Na classe Carro que implementa a interface IVeiculo este método 
é implementado da mesma forma como na classe Caminhao - poderiam inclusive serem implementados de formas diferentes - 
porém é abastecido com os cálculos de forma diferente da forma como é implementado na classe Caminhao. 
Isso permite com que para cada classe concreta sejam realizados os devidos ajustes para possibilitar o correto funcionamento 
do sistema, porém sempre respeitando os métodos obrigatórios que são definidos no contrato da interface.
Observar os métodos ExibeIPVA e IPVA da classe Carro; e os métodos ExibeIPVA, IPVA e PagaIPVA da classe Caminhao.
Na classe Caminhao existe um método específico apenas para responder a pergunta de que se um Caminhão deve ou não pagar
IPVA baseado no seu ano de fabricação - forma de codificação ideal por sinal, seguindo um dos princípios de Código Limpo, 
no qual cada função deve fazer apenas uma coisa. Na classe Carro está pergunta é respondida no mesmo método que calcula o IPVA.

═> CONSTRUTORES:
Um - método - construtor é um método especializado que é chamado automaticamente ao criar uma nova instância de um objeto.
Ele inicializa os valores das propriedades do objeto, garantindo que esteja em um estado válido desde o início.
Utilizar um construtor ajuda a garantir a consistência dos objetos e simplifica o processo de criação, pois
encapsula a lógica de inicialização em um único local.

═> TIPOS ENUM:
Os tipos enum permitem que sejam passados apenas valores pré selecionados, removendo desta forma a necessidade
constante de validações de comprimento, forma, validade, ou mesmo consultas em banco de dados para recuperar informações.